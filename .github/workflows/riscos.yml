# RISC OS CI build through JFPatch as a service.
#
# To reuse this configuration with your own repository:
#
#   - Create a .robuild.yaml to describe what should be built on RISC OS.
#       - `jobs.build.script` should be a list of commands to run on RISC OS
#       - `jobs.build.artifacts.path` should be the directory to zip.
#   - Create a VersionNum file if you wish to use the automated versioning
#     in the same style as the RISC OS sources. [optional]
#   - Update the 3rd step ('give the archive a versioned name') to give a
#     suitable name for the archive.
#   - Update the 4th step ('upload-artifacts') to include the same names.
#

name: RISC OS

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]

jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    # Step intended to be reused in CI pipelines.
    - name: Build through JFPatch-as-a-service
      run: |
        set -o pipefail
        mkdir /tmp/robuild
        # Zip up the source to send to robuild
        zip -q9r /tmp/source-archive.zip * .robuild.yaml
        # Send the archive file to JFPatch as a service
        curl -q -F 'source=@/tmp/source-archive.zip' -o /tmp/robuild/result.json https://json.build.riscos.online/build/json
        # Extract any system messages and output
        jq -r '.messages[]' /tmp/robuild/result.json > /tmp/robuild/messages.txt || { echo "Server response:" ; cat /tmp/robuild/result.json ; false ; }
        jq -r 'reduce .output[] as $i ("";. + $i)' /tmp/robuild/result.json > /tmp/robuild/output.txt
        # Extract return code
        rc=$(jq -r .rc /tmp/robuild/result.json | tee /tmp/robuild/rc.json)
        # Marker files for the state
        if [ "$rc" != "0" ] ; then touch /tmp/robuild/failed ; else touch /tmp/robuild/ok ; fi
        # Extract the built binary if we had any
        if [ "$rc" = "0" ] ; then
            jq -r .data /tmp/robuild/result.json | base64 --decode - > /tmp/robuild/built
        fi
    # Outputs:
    #   /tmp/robuild/result.json    - JSON output from the service.
    #   /tmp/robuild/{ok,failed}    - status of the build (whether RC was 0).
    #   /tmp/robuild/built          - the output result from the build.
    #   /tmp/robuild/rc             - the value of the return code (decimal string)
    #   /tmp/robuild/messages.txt   - system messages
    #   /tmp/robuild/output.txt     - output from the build

    # Another drop in, which uses that information to show the results
    - name: Did it work?
      run: |
        echo "System messages:"
        sed 's/^/  /' < /tmp/robuild/messages.txt
        echo
        echo "Build output:"
        sed 's/^/  /' < /tmp/robuild/output.txt
        echo
        if [ ! -f /tmp/robuild/ok ] ; then
            echo "FAILED! Aborting"
            exit 1
        fi

    - name: Give the output a versioned name
      run: |
        if [[ -f VersionNum ]] ; then
            version=$(sed '/MajorVersion / ! d ; s/.*MajorVersion *"\(.*\)"/\1/' VersionNum)
        else
            version=$(git rev-parse --short HEAD)
        fi
        echo This is version: $version
        mkdir robuild-client-$version
        if [ -f /tmp/robuild/built ] ; then
            cp /tmp/robuild/built robuild-client-$version/riscos-build-online,ff8
        else
            echo "No archive was built?"
            exit 1
        fi

    - uses: actions/upload-artifact@v2
      with:
        name: riscos-build-online-riscos
        path: robuild-client-*/riscos-build-online,ff8
      # The artifact that is downloadable from the Actions is actually a zip of the artifacts
      # that we supply. So it will be a regular Zip file containing a RISC OS Zip file.
